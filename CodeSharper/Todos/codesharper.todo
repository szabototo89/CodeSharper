 CodeSharper To-Do List

 ✔ Finish (redesign and refactor) Option<T> class @done (14-11-07 23:43)
   ✔ Should be able to convert implicitly from Optional.None @done (14-11-06 00:13)
   ✔ Write unit tests for testing properly @done (14-11-06 00:14)
   ✔ Implement IMonadish interface properly @done (14-11-07 23:32)
 
 ☐ Finish ArgumentResolver implementation
   ✔ It should able to set option values and check its value is optional or required! @done (14-11-18 00:20)

 ✔ Figure out what is the problem with iceScrum @done (14-11-07 23:32)
   ✔ You can find log file here: c:\Users\Tamas\AppData\Local\Kagilum\iceScrum Server\logs\  @done (14-11-07 23:32)
   ✔ I won't use this iceScrum @done (14-11-07 23:32)

 ☐ Convert (or try to rewrite) every dependency in tests to use Ninject instead. 
     for example: 
       var underTest = new StandardControlFlow(new StandardCommandManager(), ExecutorMocks.SimpleExecutor<Object>());
       // rewrite to:
       kernel.Bind<ICommandManager>().To<StandardCommandManager>(); // in Setup() method
       var underTest = new StandardControlFlow(kernel.Get<ICommandManager>(), ExecutorMocks.SimpleExecutor<Object>()); // in current test
 
 ☐ @high Decouple StandardControlFlow to two different classes: ControlFlowFactory and ControlFlow. 

 ☐ @low Update JsonCommandDescriptor parser to handle arguments like this: 
   {
        "name": "Insert TextRange Command",
        "command-names": [ "insert", "insert-text-range" ],
        "arguments": [{
          "name": {
            "value": "value",          // actual name of parameter
            "bind-to": "insert-value"  // binds to BindToAttribute.PropertyName
          },
          // rest of property values
          "type": "System.String",
          "optional": false,
          "default-value": ""
        }]
   }

   ☐ @low Decouple actual source and testing code. Move source code to /src folder and tests to /test folder.
     This could be a better solution to maintain this code base

   ☐ @low Find a proper naming convention for unit tests:
     - Actual naming convention: [Class name]Should[Verb]
       - This version is not the most convinient way to express.
     - Recommendations for naming convention
       - 7 Popular Unit Test Naming Conventions [http://java.dzone.com/articles/7-popular-unit-test-naming]
       - Naming standards for unit tests by Roy Osherove [http://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html]

