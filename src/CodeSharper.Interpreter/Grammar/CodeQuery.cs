//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Development/Projects/antlr/CodeSharper-grammars/src/CodeQuery/v1_1\CodeQuery.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CodeQuery : Parser {
	public const int
		LEFT_BRACKET=1, RIGHT_BRACKET=2, LEFT_SQUARE_BRACKET=3, RIGHT_SQUARE_BRACKET=4, 
		NUMBER=5, BOOLEAN=6, STRING=7, ID=8, SELECTOR_OPERATOR=9, DOT=10, COLON=11, 
		COMMA=12, METHOD_CALL_SYMBOL=13, ASSIGNMENT_OPERATOR=14, COMMAND_OPERATOR=15, 
		WHITESPACE=16;
	public const int
		RULE_command = 0, RULE_expression = 1, RULE_methodCall = 2, RULE_methodCallParameter = 3, 
		RULE_selector = 4, RULE_selectableElement = 5, RULE_pseudoSelector = 6, 
		RULE_selectorAttribute = 7, RULE_constant = 8;
	public static readonly string[] ruleNames = {
		"command", "expression", "methodCall", "methodCallParameter", "selector", 
		"selectableElement", "pseudoSelector", "selectorAttribute", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", null, null, null, null, null, "'.'", 
		"':'", "','", "'@'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", 
		"NUMBER", "BOOLEAN", "STRING", "ID", "SELECTOR_OPERATOR", "DOT", "COLON", 
		"COMMA", "METHOD_CALL_SYMBOL", "ASSIGNMENT_OPERATOR", "COMMAND_OPERATOR", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CodeQuery.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CodeQuery(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommandOperandContext : CommandContext {
		public CommandContext Left;
		public IToken Operator;
		public CommandContext Right;
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ITerminalNode COMMAND_OPERATOR() { return GetToken(CodeQuery.COMMAND_OPERATOR, 0); }
		public CommandOperandContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterCommandOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitCommandOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommandInnerContext : CommandContext {
		public CommandContext Command;
		public ITerminalNode LEFT_BRACKET() { return GetToken(CodeQuery.LEFT_BRACKET, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(CodeQuery.RIGHT_BRACKET, 0); }
		public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public CommandInnerContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterCommandInner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitCommandInner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandInner(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommandExpressionContext : CommandContext {
		public ExpressionContext Expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CommandExpressionContext(CommandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterCommandExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitCommandExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		return command(0);
	}

	private CommandContext command(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CommandContext _localctx = new CommandContext(Context, _parentState);
		CommandContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_command, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new CommandInnerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 19; Match(LEFT_BRACKET);
				State = 20; ((CommandInnerContext)_localctx).Command = command(0);
				State = 21; Match(RIGHT_BRACKET);
				}
				break;
			case 2:
				{
				_localctx = new CommandExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23; ((CommandExpressionContext)_localctx).Expression = expression();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 31;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CommandOperandContext(new CommandContext(_parentctx, _parentState));
					((CommandOperandContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_command);
					State = 26;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 27; ((CommandOperandContext)_localctx).Operator = Match(COMMAND_OPERATOR);
					State = 28; ((CommandOperandContext)_localctx).Right = command(4);
					}
					} 
				}
				State = 33;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionInnerContext : ExpressionContext {
		public ITerminalNode LEFT_BRACKET() { return GetToken(CodeQuery.LEFT_BRACKET, 0); }
		public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		public ITerminalNode RIGHT_BRACKET() { return GetToken(CodeQuery.RIGHT_BRACKET, 0); }
		public ExpressionInnerContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterExpressionInner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitExpressionInner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInner(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSelectorContext : ExpressionContext {
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public ExpressionSelectorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterExpressionSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitExpressionSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMethodCallContext : ExpressionContext {
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ExpressionMethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterExpressionMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitExpressionMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 40;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new ExpressionMethodCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; methodCall();
				}
				break;
			case 2:
				_localctx = new ExpressionSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; selector(0);
				}
				break;
			case 3:
				_localctx = new ExpressionInnerContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 36; Match(LEFT_BRACKET);
				State = 37; command(0);
				State = 38; Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public IToken MethodCallName;
		public MethodCallParameterContext MethodCallParameter;
		public ITerminalNode METHOD_CALL_SYMBOL() { return GetToken(CodeQuery.METHOD_CALL_SYMBOL, 0); }
		public ITerminalNode ID() { return GetToken(CodeQuery.ID, 0); }
		public MethodCallParameterContext[] methodCallParameter() {
			return GetRuleContexts<MethodCallParameterContext>();
		}
		public MethodCallParameterContext methodCallParameter(int i) {
			return GetRuleContext<MethodCallParameterContext>(i);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 4, RULE_methodCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(METHOD_CALL_SYMBOL);
			State = 43; _localctx.MethodCallName = Match(ID);
			State = 47;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 44; _localctx.MethodCallParameter = methodCallParameter();
					}
					} 
				}
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallParameterContext : ParserRuleContext {
		public MethodCallParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallParameter; } }
	 
		public MethodCallParameterContext() { }
		public virtual void CopyFrom(MethodCallParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodCallParameterValueWithExpressionContext : MethodCallParameterContext {
		public IToken ParameterName;
		public ExpressionContext ActualParameterValue;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGNMENT_OPERATOR() { return GetToken(CodeQuery.ASSIGNMENT_OPERATOR, 0); }
		public ITerminalNode ID() { return GetToken(CodeQuery.ID, 0); }
		public MethodCallParameterValueWithExpressionContext(MethodCallParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterMethodCallParameterValueWithExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitMethodCallParameterValueWithExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallParameterValueWithExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallParameterValueWithIdentifierContext : MethodCallParameterContext {
		public IToken ParameterName;
		public IToken ActualParameterValue;
		public ITerminalNode[] ID() { return GetTokens(CodeQuery.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CodeQuery.ID, i);
		}
		public ITerminalNode ASSIGNMENT_OPERATOR() { return GetToken(CodeQuery.ASSIGNMENT_OPERATOR, 0); }
		public MethodCallParameterValueWithIdentifierContext(MethodCallParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterMethodCallParameterValueWithIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitMethodCallParameterValueWithIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallParameterValueWithIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallParameterValueWithConstantContext : MethodCallParameterContext {
		public IToken ParameterName;
		public ConstantContext ActualParameterValue;
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode ASSIGNMENT_OPERATOR() { return GetToken(CodeQuery.ASSIGNMENT_OPERATOR, 0); }
		public ITerminalNode ID() { return GetToken(CodeQuery.ID, 0); }
		public MethodCallParameterValueWithConstantContext(MethodCallParameterContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterMethodCallParameterValueWithConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitMethodCallParameterValueWithConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallParameterValueWithConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallParameterContext methodCallParameter() {
		MethodCallParameterContext _localctx = new MethodCallParameterContext(Context, State);
		EnterRule(_localctx, 6, RULE_methodCallParameter);
		int _la;
		try {
			State = 65;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new MethodCallParameterValueWithExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 50; ((MethodCallParameterValueWithExpressionContext)_localctx).ParameterName = Match(ID);
					State = 51; Match(ASSIGNMENT_OPERATOR);
					}
					break;
				}
				State = 54; ((MethodCallParameterValueWithExpressionContext)_localctx).ActualParameterValue = expression();
				}
				break;
			case 2:
				_localctx = new MethodCallParameterValueWithConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				_la = TokenStream.La(1);
				if (_la==ID) {
					{
					State = 55; ((MethodCallParameterValueWithConstantContext)_localctx).ParameterName = Match(ID);
					State = 56; Match(ASSIGNMENT_OPERATOR);
					}
				}

				State = 59; ((MethodCallParameterValueWithConstantContext)_localctx).ActualParameterValue = constant();
				}
				break;
			case 3:
				_localctx = new MethodCallParameterValueWithIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 60; ((MethodCallParameterValueWithIdentifierContext)_localctx).ParameterName = Match(ID);
					State = 61; Match(ASSIGNMENT_OPERATOR);
					}
					break;
				}
				State = 64; ((MethodCallParameterValueWithIdentifierContext)_localctx).ActualParameterValue = Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnarySelectionContext : SelectorContext {
		public SelectableElementContext Value;
		public SelectableElementContext selectableElement() {
			return GetRuleContext<SelectableElementContext>(0);
		}
		public UnarySelectionContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterUnarySelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitUnarySelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnarySelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinarySelectionContext : SelectorContext {
		public SelectorContext Left;
		public IToken SelectorOperator;
		public SelectorContext Right;
		public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public ITerminalNode SELECTOR_OPERATOR() { return GetToken(CodeQuery.SELECTOR_OPERATOR, 0); }
		public BinarySelectionContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterBinarySelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitBinarySelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinarySelection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectionWithParenthesisContext : SelectorContext {
		public SelectorContext Selector;
		public ITerminalNode LEFT_BRACKET() { return GetToken(CodeQuery.LEFT_BRACKET, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(CodeQuery.RIGHT_BRACKET, 0); }
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public SelectionWithParenthesisContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterSelectionWithParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitSelectionWithParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionWithParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		return selector(0);
	}

	private SelectorContext selector(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectorContext _localctx = new SelectorContext(Context, _parentState);
		SelectorContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_selector, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			switch (TokenStream.La(1)) {
			case ID:
			case DOT:
				{
				_localctx = new UnarySelectionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 68; ((UnarySelectionContext)_localctx).Value = selectableElement();
				}
				break;
			case LEFT_BRACKET:
				{
				_localctx = new SelectionWithParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69; Match(LEFT_BRACKET);
				State = 70; ((SelectionWithParenthesisContext)_localctx).Selector = selector(0);
				State = 71; Match(RIGHT_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 82;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinarySelectionContext(new SelectorContext(_parentctx, _parentState));
					((BinarySelectionContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_selector);
					State = 75;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 77;
					_la = TokenStream.La(1);
					if (_la==SELECTOR_OPERATOR) {
						{
						State = 76; ((BinarySelectionContext)_localctx).SelectorOperator = Match(SELECTOR_OPERATOR);
						}
					}

					State = 79; ((BinarySelectionContext)_localctx).Right = selector(2);
					}
					} 
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectableElementContext : ParserRuleContext {
		public IToken ElementName;
		public SelectorAttributeContext SelectorAttributes;
		public PseudoSelectorContext PseudoSelectors;
		public ITerminalNode ID() { return GetToken(CodeQuery.ID, 0); }
		public ITerminalNode DOT() { return GetToken(CodeQuery.DOT, 0); }
		public SelectorAttributeContext[] selectorAttribute() {
			return GetRuleContexts<SelectorAttributeContext>();
		}
		public SelectorAttributeContext selectorAttribute(int i) {
			return GetRuleContext<SelectorAttributeContext>(i);
		}
		public PseudoSelectorContext[] pseudoSelector() {
			return GetRuleContexts<PseudoSelectorContext>();
		}
		public PseudoSelectorContext pseudoSelector(int i) {
			return GetRuleContext<PseudoSelectorContext>(i);
		}
		public SelectableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectableElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterSelectableElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitSelectableElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectableElementContext selectableElement() {
		SelectableElementContext _localctx = new SelectableElementContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectableElement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.La(1);
			if (_la==DOT) {
				{
				State = 85; Match(DOT);
				}
			}

			State = 88; _localctx.ElementName = Match(ID);
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 89; _localctx.SelectorAttributes = selectorAttribute();
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 95; _localctx.PseudoSelectors = pseudoSelector();
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoSelectorContext : ParserRuleContext {
		public PseudoSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoSelector; } }
	 
		public PseudoSelectorContext() { }
		public virtual void CopyFrom(PseudoSelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PseudoSelectorWithConstantContext : PseudoSelectorContext {
		public IToken Name;
		public ConstantContext Value;
		public ITerminalNode COLON() { return GetToken(CodeQuery.COLON, 0); }
		public ITerminalNode ID() { return GetToken(CodeQuery.ID, 0); }
		public ITerminalNode LEFT_BRACKET() { return GetToken(CodeQuery.LEFT_BRACKET, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(CodeQuery.RIGHT_BRACKET, 0); }
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CodeQuery.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CodeQuery.COMMA, i);
		}
		public PseudoSelectorWithConstantContext(PseudoSelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterPseudoSelectorWithConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitPseudoSelectorWithConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoSelectorWithConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PseudoSelectorWithIdentifierContext : PseudoSelectorContext {
		public IToken Name;
		public IToken Value;
		public ITerminalNode COLON() { return GetToken(CodeQuery.COLON, 0); }
		public ITerminalNode[] ID() { return GetTokens(CodeQuery.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CodeQuery.ID, i);
		}
		public ITerminalNode LEFT_BRACKET() { return GetToken(CodeQuery.LEFT_BRACKET, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(CodeQuery.RIGHT_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CodeQuery.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CodeQuery.COMMA, i);
		}
		public PseudoSelectorWithIdentifierContext(PseudoSelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterPseudoSelectorWithIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitPseudoSelectorWithIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoSelectorWithIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoSelectorContext pseudoSelector() {
		PseudoSelectorContext _localctx = new PseudoSelectorContext(Context, State);
		EnterRule(_localctx, 12, RULE_pseudoSelector);
		int _la;
		try {
			State = 130;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new PseudoSelectorWithConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 101; Match(COLON);
				State = 102; ((PseudoSelectorWithConstantContext)_localctx).Name = Match(ID);
				State = 114;
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 103; Match(LEFT_BRACKET);
					State = 104; ((PseudoSelectorWithConstantContext)_localctx).Value = constant();
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==COMMA) {
						{
						{
						State = 105; Match(COMMA);
						State = 106; ((PseudoSelectorWithConstantContext)_localctx).Value = constant();
						}
						}
						State = 111;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 112; Match(RIGHT_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new PseudoSelectorWithIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(COLON);
				State = 117; ((PseudoSelectorWithIdentifierContext)_localctx).Name = Match(ID);
				State = 128;
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 118; Match(LEFT_BRACKET);
					State = 119; ((PseudoSelectorWithIdentifierContext)_localctx).Value = Match(ID);
					State = 124;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==COMMA) {
						{
						{
						State = 120; Match(COMMA);
						State = 121; ((PseudoSelectorWithIdentifierContext)_localctx).Value = Match(ID);
						}
						}
						State = 126;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 127; Match(RIGHT_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorAttributeContext : ParserRuleContext {
		public IToken AttributeName;
		public ConstantContext AttributeValue;
		public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(CodeQuery.LEFT_SQUARE_BRACKET, 0); }
		public ITerminalNode ASSIGNMENT_OPERATOR() { return GetToken(CodeQuery.ASSIGNMENT_OPERATOR, 0); }
		public ITerminalNode RIGHT_SQUARE_BRACKET() { return GetToken(CodeQuery.RIGHT_SQUARE_BRACKET, 0); }
		public ITerminalNode ID() { return GetToken(CodeQuery.ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public SelectorAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterSelectorAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitSelectorAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorAttributeContext selectorAttribute() {
		SelectorAttributeContext _localctx = new SelectorAttributeContext(Context, State);
		EnterRule(_localctx, 14, RULE_selectorAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(LEFT_SQUARE_BRACKET);
			State = 133; _localctx.AttributeName = Match(ID);
			State = 134; Match(ASSIGNMENT_OPERATOR);
			State = 135; _localctx.AttributeValue = constant();
			State = 136; Match(RIGHT_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	 
		public ConstantContext() { }
		public virtual void CopyFrom(ConstantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantStringContext : ConstantContext {
		public ITerminalNode STRING() { return GetToken(CodeQuery.STRING, 0); }
		public ConstantStringContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterConstantString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitConstantString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantNumberContext : ConstantContext {
		public ITerminalNode NUMBER() { return GetToken(CodeQuery.NUMBER, 0); }
		public ConstantNumberContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterConstantNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitConstantNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantBooleanContext : ConstantContext {
		public ITerminalNode BOOLEAN() { return GetToken(CodeQuery.BOOLEAN, 0); }
		public ConstantBooleanContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.EnterConstantBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICodeQueryListener typedListener = listener as ICodeQueryListener;
			if (typedListener != null) typedListener.ExitConstantBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICodeQueryVisitor<TResult> typedVisitor = visitor as ICodeQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 16, RULE_constant);
		try {
			State = 141;
			switch (TokenStream.La(1)) {
			case STRING:
				_localctx = new ConstantStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new ConstantNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(NUMBER);
				}
				break;
			case BOOLEAN:
				_localctx = new ConstantBooleanContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 140; Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return command_sempred((CommandContext)_localctx, predIndex);
		case 4: return selector_sempred((SelectorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool command_sempred(CommandContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool selector_sempred(SelectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x12\x92\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x1B\n\x2\x3\x2"+
		"\x3\x2\x3\x2\a\x2 \n\x2\f\x2\xE\x2#\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3+\n\x3\x3\x4\x3\x4\x3\x4\a\x4\x30\n\x4\f\x4\xE\x4\x33\v\x4"+
		"\x3\x5\x3\x5\x5\x5\x37\n\x5\x3\x5\x3\x5\x3\x5\x5\x5<\n\x5\x3\x5\x3\x5"+
		"\x3\x5\x5\x5\x41\n\x5\x3\x5\x5\x5\x44\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x5\x6L\n\x6\x3\x6\x3\x6\x5\x6P\n\x6\x3\x6\a\x6S\n\x6\f\x6\xE"+
		"\x6V\v\x6\x3\a\x5\aY\n\a\x3\a\x3\a\a\a]\n\a\f\a\xE\a`\v\a\x3\a\a\a\x63"+
		"\n\a\f\a\xE\a\x66\v\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\bn\n\b\f\b\xE\b"+
		"q\v\b\x3\b\x3\b\x5\bu\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b}\n\b\f\b\xE"+
		"\b\x80\v\b\x3\b\x5\b\x83\n\b\x5\b\x85\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\n\x3\n\x3\n\x5\n\x90\n\n\x3\n\x2\x4\x2\n\v\x2\x4\x6\b\n\f\xE\x10"+
		"\x12\x2\x2\x9F\x2\x1A\x3\x2\x2\x2\x4*\x3\x2\x2\x2\x6,\x3\x2\x2\x2\b\x43"+
		"\x3\x2\x2\x2\nK\x3\x2\x2\x2\fX\x3\x2\x2\x2\xE\x84\x3\x2\x2\x2\x10\x86"+
		"\x3\x2\x2\x2\x12\x8F\x3\x2\x2\x2\x14\x15\b\x2\x1\x2\x15\x16\a\x3\x2\x2"+
		"\x16\x17\x5\x2\x2\x2\x17\x18\a\x4\x2\x2\x18\x1B\x3\x2\x2\x2\x19\x1B\x5"+
		"\x4\x3\x2\x1A\x14\x3\x2\x2\x2\x1A\x19\x3\x2\x2\x2\x1B!\x3\x2\x2\x2\x1C"+
		"\x1D\f\x5\x2\x2\x1D\x1E\a\x11\x2\x2\x1E \x5\x2\x2\x6\x1F\x1C\x3\x2\x2"+
		"\x2 #\x3\x2\x2\x2!\x1F\x3\x2\x2\x2!\"\x3\x2\x2\x2\"\x3\x3\x2\x2\x2#!\x3"+
		"\x2\x2\x2$+\x5\x6\x4\x2%+\x5\n\x6\x2&\'\a\x3\x2\x2\'(\x5\x2\x2\x2()\a"+
		"\x4\x2\x2)+\x3\x2\x2\x2*$\x3\x2\x2\x2*%\x3\x2\x2\x2*&\x3\x2\x2\x2+\x5"+
		"\x3\x2\x2\x2,-\a\xF\x2\x2-\x31\a\n\x2\x2.\x30\x5\b\x5\x2/.\x3\x2\x2\x2"+
		"\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\a\x3\x2"+
		"\x2\x2\x33\x31\x3\x2\x2\x2\x34\x35\a\n\x2\x2\x35\x37\a\x10\x2\x2\x36\x34"+
		"\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x44\x5\x4\x3"+
		"\x2\x39:\a\n\x2\x2:<\a\x10\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<=\x3\x2"+
		"\x2\x2=\x44\x5\x12\n\x2>?\a\n\x2\x2?\x41\a\x10\x2\x2@>\x3\x2\x2\x2@\x41"+
		"\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\a\n\x2\x2\x43\x36\x3\x2\x2\x2"+
		"\x43;\x3\x2\x2\x2\x43@\x3\x2\x2\x2\x44\t\x3\x2\x2\x2\x45\x46\b\x6\x1\x2"+
		"\x46L\x5\f\a\x2GH\a\x3\x2\x2HI\x5\n\x6\x2IJ\a\x4\x2\x2JL\x3\x2\x2\x2K"+
		"\x45\x3\x2\x2\x2KG\x3\x2\x2\x2LT\x3\x2\x2\x2MO\f\x4\x2\x2NP\a\v\x2\x2"+
		"ON\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\x3\x2\x2\x2QS\x5\n\x6\x4RM\x3\x2\x2\x2"+
		"SV\x3\x2\x2\x2TR\x3\x2\x2\x2TU\x3\x2\x2\x2U\v\x3\x2\x2\x2VT\x3\x2\x2\x2"+
		"WY\a\f\x2\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2YZ\x3\x2\x2\x2Z^\a\n\x2\x2[]\x5"+
		"\x10\t\x2\\[\x3\x2\x2\x2]`\x3\x2\x2\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_\x64"+
		"\x3\x2\x2\x2`^\x3\x2\x2\x2\x61\x63\x5\xE\b\x2\x62\x61\x3\x2\x2\x2\x63"+
		"\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\r\x3\x2\x2"+
		"\x2\x66\x64\x3\x2\x2\x2gh\a\r\x2\x2ht\a\n\x2\x2ij\a\x3\x2\x2jo\x5\x12"+
		"\n\x2kl\a\xE\x2\x2ln\x5\x12\n\x2mk\x3\x2\x2\x2nq\x3\x2\x2\x2om\x3\x2\x2"+
		"\x2op\x3\x2\x2\x2pr\x3\x2\x2\x2qo\x3\x2\x2\x2rs\a\x4\x2\x2su\x3\x2\x2"+
		"\x2ti\x3\x2\x2\x2tu\x3\x2\x2\x2u\x85\x3\x2\x2\x2vw\a\r\x2\x2w\x82\a\n"+
		"\x2\x2xy\a\x3\x2\x2y~\a\n\x2\x2z{\a\xE\x2\x2{}\a\n\x2\x2|z\x3\x2\x2\x2"+
		"}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x81\x3\x2\x2\x2\x80"+
		"~\x3\x2\x2\x2\x81\x83\a\x4\x2\x2\x82x\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2"+
		"\x83\x85\x3\x2\x2\x2\x84g\x3\x2\x2\x2\x84v\x3\x2\x2\x2\x85\xF\x3\x2\x2"+
		"\x2\x86\x87\a\x5\x2\x2\x87\x88\a\n\x2\x2\x88\x89\a\x10\x2\x2\x89\x8A\x5"+
		"\x12\n\x2\x8A\x8B\a\x6\x2\x2\x8B\x11\x3\x2\x2\x2\x8C\x90\a\t\x2\x2\x8D"+
		"\x90\a\a\x2\x2\x8E\x90\a\b\x2\x2\x8F\x8C\x3\x2\x2\x2\x8F\x8D\x3\x2\x2"+
		"\x2\x8F\x8E\x3\x2\x2\x2\x90\x13\x3\x2\x2\x2\x16\x1A!*\x31\x36;@\x43KO"+
		"TX^\x64ot~\x82\x84\x8F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
