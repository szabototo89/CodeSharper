//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Development/Projects/antlr/CodeSharper-grammars/src/CodeQuery/v2\CodeQuery.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;

namespace CodeSharper.Interpreter.Grammar
{
    /// <summary>
    /// This class provides an empty implementation of <see cref="ICodeQueryVisitor{Result}"/>,
    /// which can be extended to create a visitor which only needs to handle a subset
    /// of the available methods.
    /// </summary>
    /// <typeparam name="Result">The return type of the visit operation.</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
    [System.CLSCompliant(false)]
    public partial class CodeQueryBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, ICodeQueryVisitor<Result> {
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.CommandOperand"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitCommandOperand([NotNull] CodeQueryParser.CommandOperandContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.CommandInner"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitCommandInner([NotNull] CodeQueryParser.CommandInnerContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.CommandExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitCommandExpression([NotNull] CodeQueryParser.CommandExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.ExpressionMethodCall"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitExpressionMethodCall([NotNull] CodeQueryParser.ExpressionMethodCallContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.ExpressionSelector"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitExpressionSelector([NotNull] CodeQueryParser.ExpressionSelectorContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.methodCall"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodCall([NotNull] CodeQueryParser.MethodCallContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.MethodCallParameterValueWithExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodCallParameterValueWithExpression([NotNull] CodeQueryParser.MethodCallParameterValueWithExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.MethodCallParameterValueWithConstant"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodCallParameterValueWithConstant([NotNull] CodeQueryParser.MethodCallParameterValueWithConstantContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.MethodCallParameterValueWithIdentifier"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodCallParameterValueWithIdentifier([NotNull] CodeQueryParser.MethodCallParameterValueWithIdentifierContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.UnarySelection"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitUnarySelection([NotNull] CodeQueryParser.UnarySelectionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.BinarySelection"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBinarySelection([NotNull] CodeQueryParser.BinarySelectionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.SelectionWithParenthesis"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSelectionWithParenthesis([NotNull] CodeQueryParser.SelectionWithParenthesisContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.selectableElement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSelectableElement([NotNull] CodeQueryParser.SelectableElementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.className"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitClassName([NotNull] CodeQueryParser.ClassNameContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.PseudoSelectorSimple"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPseudoSelectorSimple([NotNull] CodeQueryParser.PseudoSelectorSimpleContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.PseudoSelectorWithConstant"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPseudoSelectorWithConstant([NotNull] CodeQueryParser.PseudoSelectorWithConstantContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.PseudoSelectorWithIdentifier"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPseudoSelectorWithIdentifier([NotNull] CodeQueryParser.PseudoSelectorWithIdentifierContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.PseudoSelectorWithSelector"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPseudoSelectorWithSelector([NotNull] CodeQueryParser.PseudoSelectorWithSelectorContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.selectorAttribute"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSelectorAttribute([NotNull] CodeQueryParser.SelectorAttributeContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.ConstantString"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitConstantString([NotNull] CodeQueryParser.ConstantStringContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.ConstantNumber"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitConstantNumber([NotNull] CodeQueryParser.ConstantNumberContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="CodeQueryParser.ConstantBoolean"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitConstantBoolean([NotNull] CodeQueryParser.ConstantBooleanContext context) { return VisitChildren(context); }
    }
}
