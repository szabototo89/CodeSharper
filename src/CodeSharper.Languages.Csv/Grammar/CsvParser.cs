//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Development/Projects/playground/antlr_sample/src\Csv.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Grammar {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CsvParser : Parser {
	public const int
		T__0=1, T__1=2, COMMA=3, TEXT=4, STRING=5;
	public const int
		RULE_start = 0, RULE_row = 1, RULE_field = 2;
	public static readonly string[] ruleNames = {
		"start", "row", "field"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\r'", "'\n'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "COMMA", "TEXT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Csv.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CsvParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public RowContext Rows;
		public RowContext[] row() {
			return GetRuleContexts<RowContext>();
		}
		public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << COMMA) | (1L << TEXT) | (1L << STRING))) != 0)) {
				{
				{
				State = 6; _localctx.Rows = row();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		public FieldContext Fields;
		public IToken Comma;
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CsvParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CsvParser.COMMA, i);
		}
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(Context, State);
		EnterRule(_localctx, 2, RULE_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 12; _localctx.Fields = field();
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 13; _localctx.Comma = Match(COMMA);
				State = 14; _localctx.Fields = field();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
			State = 21;
			_la = TokenStream.La(1);
			if (_la==T__0) {
				{
				State = 20; Match(T__0);
				}
			}

			State = 23; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(CsvParser.TEXT, 0); }
		public ITerminalNode STRING() { return GetToken(CsvParser.STRING, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 4, RULE_field);
		try {
			State = 28;
			switch (TokenStream.La(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25; Match(TEXT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; Match(STRING);
				}
				break;
			case T__0:
			case T__1:
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\a!\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x3\x2\a\x2\n\n\x2\f\x2\xE\x2\r\v\x2\x3\x3\x3\x3\x3"+
		"\x3\a\x3\x12\n\x3\f\x3\xE\x3\x15\v\x3\x3\x3\x5\x3\x18\n\x3\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\x1F\n\x4\x3\x4\x2\x2\x5\x2\x4\x6\x2\x2\"\x2\v"+
		"\x3\x2\x2\x2\x4\xE\x3\x2\x2\x2\x6\x1E\x3\x2\x2\x2\b\n\x5\x4\x3\x2\t\b"+
		"\x3\x2\x2\x2\n\r\x3\x2\x2\x2\v\t\x3\x2\x2\x2\v\f\x3\x2\x2\x2\f\x3\x3\x2"+
		"\x2\x2\r\v\x3\x2\x2\x2\xE\x13\x5\x6\x4\x2\xF\x10\a\x5\x2\x2\x10\x12\x5"+
		"\x6\x4\x2\x11\xF\x3\x2\x2\x2\x12\x15\x3\x2\x2\x2\x13\x11\x3\x2\x2\x2\x13"+
		"\x14\x3\x2\x2\x2\x14\x17\x3\x2\x2\x2\x15\x13\x3\x2\x2\x2\x16\x18\a\x3"+
		"\x2\x2\x17\x16\x3\x2\x2\x2\x17\x18\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19"+
		"\x1A\a\x4\x2\x2\x1A\x5\x3\x2\x2\x2\x1B\x1F\a\x6\x2\x2\x1C\x1F\a\a\x2\x2"+
		"\x1D\x1F\x3\x2\x2\x2\x1E\x1B\x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2\x1E\x1D\x3"+
		"\x2\x2\x2\x1F\a\x3\x2\x2\x2\x6\v\x13\x17\x1E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Grammar
