//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Development/Projects/antlr/CodeSharper-grammars/src/JSON/v1\Json.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;

namespace CodeSharper.Languages.Json.Grammar
{
    /// <summary>
    /// This class provides an empty implementation of <see cref="IJsonVisitor{Result}"/>,
    /// which can be extended to create a visitor which only needs to handle a subset
    /// of the available methods.
    /// </summary>
    /// <typeparam name="Result">The return type of the visit operation.</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
    [System.CLSCompliant(false)]
    public partial class JsonBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IJsonVisitor<Result> {
        /// <summary>
        /// Visit a parse tree produced by <see cref="JsonParser.start"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitStart([NotNull] JsonParser.StartContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JsonParser.literal"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLiteral([NotNull] JsonParser.LiteralContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JsonParser.objectLiteral"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitObjectLiteral([NotNull] JsonParser.ObjectLiteralContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JsonParser.arrayLiteral"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArrayLiteral([NotNull] JsonParser.ArrayLiteralContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JsonParser.keyValuePair"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitKeyValuePair([NotNull] JsonParser.KeyValuePairContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JsonParser.key"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitKey([NotNull] JsonParser.KeyContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JsonParser.value"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitValue([NotNull] JsonParser.ValueContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JsonParser.constant"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitConstant([NotNull] JsonParser.ConstantContext context) { return VisitChildren(context); }
    }
}
