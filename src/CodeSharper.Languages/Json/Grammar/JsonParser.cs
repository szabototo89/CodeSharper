//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Development/Projects/antlr/CodeSharper-grammars/src/JSON/v1\Json.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class JsonParser : Parser {
	public const int
		COLON=1, COMMA=2, BOOLEAN=3, NUMBER=4, STRING=5, IDENTIFIER=6, CURLY_BRACE_OPEN=7, 
		CURLY_BRACE_CLOSE=8, SQUARE_BRACE_OPEN=9, SQUARE_BRACE_CLOSE=10, WHITESPACE=11;
	public const int
		RULE_start = 0, RULE_literal = 1, RULE_objectLiteral = 2, RULE_arrayLiteral = 3, 
		RULE_keyValuePair = 4, RULE_key = 5, RULE_value = 6, RULE_constant = 7;
	public static readonly string[] ruleNames = {
		"start", "literal", "objectLiteral", "arrayLiteral", "keyValuePair", "key", 
		"value", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "','", null, null, null, null, "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COLON", "COMMA", "BOOLEAN", "NUMBER", "STRING", "IDENTIFIER", "CURLY_BRACE_OPEN", 
		"CURLY_BRACE_CLOSE", "SQUARE_BRACE_OPEN", "SQUARE_BRACE_CLOSE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Json.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public JsonParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public LiteralContext Literal;
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; _localctx.Literal = literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ObjectLiteralContext ObjectLiteral;
		public ArrayLiteralContext ArrayLiteral;
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 2, RULE_literal);
		try {
			State = 20;
			switch (TokenStream.La(1)) {
			case CURLY_BRACE_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18; _localctx.ObjectLiteral = objectLiteral();
				}
				break;
			case SQUARE_BRACE_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19; _localctx.ArrayLiteral = arrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public ITerminalNode CURLY_BRACE_OPEN() { return GetToken(JsonParser.CURLY_BRACE_OPEN, 0); }
		public ITerminalNode CURLY_BRACE_CLOSE() { return GetToken(JsonParser.CURLY_BRACE_CLOSE, 0); }
		public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsonParser.COMMA, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(CURLY_BRACE_OPEN);
			State = 31;
			_la = TokenStream.La(1);
			if (_la==STRING || _la==IDENTIFIER) {
				{
				State = 23; keyValuePair();
				State = 28;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 24; Match(COMMA);
						State = 25; keyValuePair();
						}
						} 
					}
					State = 30;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				}
			}

			State = 34;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 33; Match(COMMA);
				}
			}

			State = 36; Match(CURLY_BRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ITerminalNode SQUARE_BRACE_OPEN() { return GetToken(JsonParser.SQUARE_BRACE_OPEN, 0); }
		public ITerminalNode SQUARE_BRACE_CLOSE() { return GetToken(JsonParser.SQUARE_BRACE_CLOSE, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsonParser.COMMA, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 6, RULE_arrayLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(SQUARE_BRACE_OPEN);
			State = 47;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << NUMBER) | (1L << STRING) | (1L << CURLY_BRACE_OPEN) | (1L << SQUARE_BRACE_OPEN))) != 0)) {
				{
				State = 39; value();
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 40; Match(COMMA);
						State = 41; value();
						}
						} 
					}
					State = 46;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				}
			}

			State = 50;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 49; Match(COMMA);
				}
			}

			State = 52; Match(SQUARE_BRACE_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		public KeyContext Key;
		public IToken Colon;
		public ValueContext Value;
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(JsonParser.COLON, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 8, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; _localctx.Key = key();
			State = 55; _localctx.Colon = Match(COLON);
			State = 56; _localctx.Value = value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
	 
		public KeyContext() { }
		public virtual void CopyFrom(KeyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierKeyContext : KeyContext {
		public IToken Key;
		public ITerminalNode IDENTIFIER() { return GetToken(JsonParser.IDENTIFIER, 0); }
		public IdentifierKeyContext(KeyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringKeyContext : KeyContext {
		public IToken Key;
		public ITerminalNode STRING() { return GetToken(JsonParser.STRING, 0); }
		public StringKeyContext(KeyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 10, RULE_key);
		try {
			State = 60;
			switch (TokenStream.La(1)) {
			case IDENTIFIER:
				_localctx = new IdentifierKeyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; ((IdentifierKeyContext)_localctx).Key = Match(IDENTIFIER);
				}
				break;
			case STRING:
				_localctx = new StringKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; ((StringKeyContext)_localctx).Key = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralValueContext : ValueContext {
		public LiteralContext Value;
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantValueContext : ValueContext {
		public ConstantContext Value;
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_value);
		try {
			State = 64;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case NUMBER:
			case STRING:
				_localctx = new ConstantValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; ((ConstantValueContext)_localctx).Value = constant();
				}
				break;
			case CURLY_BRACE_OPEN:
			case SQUARE_BRACE_OPEN:
				_localctx = new LiteralValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; ((LiteralValueContext)_localctx).Value = literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	 
		public ConstantContext() { }
		public virtual void CopyFrom(ConstantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberConstantContext : ConstantContext {
		public IToken Value;
		public ITerminalNode NUMBER() { return GetToken(JsonParser.NUMBER, 0); }
		public NumberConstantContext(ConstantContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanConstantContext : ConstantContext {
		public IToken Value;
		public ITerminalNode BOOLEAN() { return GetToken(JsonParser.BOOLEAN, 0); }
		public BooleanConstantContext(ConstantContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringConstantContext : ConstantContext {
		public IToken Value;
		public ITerminalNode STRING() { return GetToken(JsonParser.STRING, 0); }
		public StringConstantContext(ConstantContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonVisitor<TResult> typedVisitor = visitor as IJsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 14, RULE_constant);
		try {
			State = 69;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
				_localctx = new BooleanConstantContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; ((BooleanConstantContext)_localctx).Value = Match(BOOLEAN);
				}
				break;
			case NUMBER:
				_localctx = new NumberConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; ((NumberConstantContext)_localctx).Value = Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new StringConstantContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; ((StringConstantContext)_localctx).Value = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\rJ\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x5\x3\x17\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x1D"+
		"\n\x4\f\x4\xE\x4 \v\x4\x5\x4\"\n\x4\x3\x4\x5\x4%\n\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\a\x5-\n\x5\f\x5\xE\x5\x30\v\x5\x5\x5\x32\n\x5\x3\x5"+
		"\x5\x5\x35\n\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x5\a?\n"+
		"\a\x3\b\x3\b\x5\b\x43\n\b\x3\t\x3\t\x3\t\x5\tH\n\t\x3\t\x2\x2\n\x2\x4"+
		"\x6\b\n\f\xE\x10\x2\x2L\x2\x12\x3\x2\x2\x2\x4\x16\x3\x2\x2\x2\x6\x18\x3"+
		"\x2\x2\x2\b(\x3\x2\x2\x2\n\x38\x3\x2\x2\x2\f>\x3\x2\x2\x2\xE\x42\x3\x2"+
		"\x2\x2\x10G\x3\x2\x2\x2\x12\x13\x5\x4\x3\x2\x13\x3\x3\x2\x2\x2\x14\x17"+
		"\x5\x6\x4\x2\x15\x17\x5\b\x5\x2\x16\x14\x3\x2\x2\x2\x16\x15\x3\x2\x2\x2"+
		"\x17\x5\x3\x2\x2\x2\x18!\a\t\x2\x2\x19\x1E\x5\n\x6\x2\x1A\x1B\a\x4\x2"+
		"\x2\x1B\x1D\x5\n\x6\x2\x1C\x1A\x3\x2\x2\x2\x1D \x3\x2\x2\x2\x1E\x1C\x3"+
		"\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F\"\x3\x2\x2\x2 \x1E\x3\x2\x2\x2!\x19"+
		"\x3\x2\x2\x2!\"\x3\x2\x2\x2\"$\x3\x2\x2\x2#%\a\x4\x2\x2$#\x3\x2\x2\x2"+
		"$%\x3\x2\x2\x2%&\x3\x2\x2\x2&\'\a\n\x2\x2\'\a\x3\x2\x2\x2(\x31\a\v\x2"+
		"\x2).\x5\xE\b\x2*+\a\x4\x2\x2+-\x5\xE\b\x2,*\x3\x2\x2\x2-\x30\x3\x2\x2"+
		"\x2.,\x3\x2\x2\x2./\x3\x2\x2\x2/\x32\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x31"+
		")\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x34\x3\x2\x2\x2\x33\x35\a\x4\x2"+
		"\x2\x34\x33\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x37"+
		"\a\f\x2\x2\x37\t\x3\x2\x2\x2\x38\x39\x5\f\a\x2\x39:\a\x3\x2\x2:;\x5\xE"+
		"\b\x2;\v\x3\x2\x2\x2<?\a\b\x2\x2=?\a\a\x2\x2><\x3\x2\x2\x2>=\x3\x2\x2"+
		"\x2?\r\x3\x2\x2\x2@\x43\x5\x10\t\x2\x41\x43\x5\x4\x3\x2\x42@\x3\x2\x2"+
		"\x2\x42\x41\x3\x2\x2\x2\x43\xF\x3\x2\x2\x2\x44H\a\x5\x2\x2\x45H\a\x6\x2"+
		"\x2\x46H\a\a\x2\x2G\x44\x3\x2\x2\x2G\x45\x3\x2\x2\x2G\x46\x3\x2\x2\x2"+
		"H\x11\x3\x2\x2\x2\f\x16\x1E!$.\x31\x34>\x42G";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
